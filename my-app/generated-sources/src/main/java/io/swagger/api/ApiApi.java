/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.48).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.CarRequest;
import io.swagger.model.CarResponse;
import io.swagger.model.ReservationRequest;
import io.swagger.model.ReservationResponse;
import io.swagger.model.UserRequest;
import io.swagger.model.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-19T18:37:39.108177982Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Add Reservations", description = "Add one or more reservations to the system.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Reservations created successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/reservations",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addReservation(@Parameter(in = ParameterIn.DEFAULT, description = "List of reservation requests", required=true, schema=@Schema()) @Valid @RequestBody List<ReservationRequest> body);


    @Operation(summary = "Add Users", description = "Add one or more users to the system.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Users added successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/users",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "List of user requests", required=true, schema=@Schema()) @Valid @RequestBody List<UserRequest> body);


    @Operation(summary = "Calculate Average Mileage", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Average mileage", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BigDecimal.class))) })
    @RequestMapping(value = "/api/cars/average-mileage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BigDecimal> calculateAverageMileage();


    @Operation(summary = "Create a Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Car created successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/cars",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCar(@Parameter(in = ParameterIn.DEFAULT, description = "List of car requests", required=true, schema=@Schema()) @Valid @RequestBody List<CarRequest> body);


    @Operation(summary = "Delete Car by VIN", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/api/cars/{vin}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCar(@Parameter(in = ParameterIn.PATH, description = "VIN of the car", required=true, schema=@Schema()) @PathVariable("vin") Integer vin);


    @Operation(summary = "Find Cheapest Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cheapest car details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarResponse.class))) })
    @RequestMapping(value = "/api/cars/cheapest-car",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarResponse> findCheapestCar();


    @Operation(summary = "Find Most Expensive Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Most expensive car details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarResponse.class))) })
    @RequestMapping(value = "/api/cars/most-expensive-car",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarResponse> findMostExpensiveCar();


    @Operation(summary = "Find Newest Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Newest car details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarResponse.class))) })
    @RequestMapping(value = "/api/cars/newest-car",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarResponse> findNewestCar();


    @Operation(summary = "Find Oldest Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Oldest car details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarResponse.class))) })
    @RequestMapping(value = "/api/cars/oldest-car",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarResponse> findOldestCar();


    @Operation(summary = "Get All Cars", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of cars", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarResponse.class)))) })
    @RequestMapping(value = "/api/cars",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarResponse>> getAllCars();


    @Operation(summary = "Get All Reservations", description = "Get a list of all reservations in the system.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of reservation details", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ReservationResponse.class)))) })
    @RequestMapping(value = "/api/reservations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ReservationResponse>> getAllReservations();


    @Operation(summary = "Get All Users", description = "Get a list of all users in the system.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of user details", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))) })
    @RequestMapping(value = "/api/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserResponse>> getAllUsers();


    @Operation(summary = "Get Car by VIN", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CarResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Car not found") })
    @RequestMapping(value = "/api/cars/{vin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarResponse> getCarById(@Parameter(in = ParameterIn.PATH, description = "VIN of the car", required=true, schema=@Schema()) @PathVariable("vin") Integer vin);


    @Operation(summary = "Get Cars by Color", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of cars by color", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarResponse.class)))) })
    @RequestMapping(value = "/api/cars/by-color",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarResponse>> getCarsByColor(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Color of the car" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "color", required = true) String color);


    @Operation(summary = "Get Cars by Make", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of cars by make", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarResponse.class)))) })
    @RequestMapping(value = "/api/cars/by-make",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarResponse>> getCarsByMake(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Make of the car" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "make", required = true) String make);


    @Operation(summary = "Get Cars by Year", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of cars by year", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CarResponse.class)))) })
    @RequestMapping(value = "/api/cars/by-year",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CarResponse>> getCarsByYear(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Year of the car" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "year", required = true) Integer year);


    @Operation(summary = "Get Reservation by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Reservation not found") })
    @RequestMapping(value = "/api/reservations/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReservationResponse> getReservationById(@Parameter(in = ParameterIn.PATH, description = "ID of the reservation", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get User by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/api/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserResponse> getUserById(@Parameter(in = ParameterIn.PATH, description = "ID of the user", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Remove Reservation by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation removed successfully"),
        
        @ApiResponse(responseCode = "404", description = "Reservation not found") })
    @RequestMapping(value = "/api/reservations/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeReservation(@Parameter(in = ParameterIn.PATH, description = "ID of the reservation", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Remove User by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User removed successfully"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/api/users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeUser(@Parameter(in = ParameterIn.PATH, description = "ID of the user", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Update Car", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Car updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/cars/{carId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCar(@Parameter(in = ParameterIn.PATH, description = "ID of the car", required=true, schema=@Schema()) @PathVariable("carId") Integer carId, @Parameter(in = ParameterIn.DEFAULT, description = "Car request", required=true, schema=@Schema()) @Valid @RequestBody CarRequest body);


    @Operation(summary = "Update Reservation", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/reservations/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateReservation(@Parameter(in = ParameterIn.PATH, description = "ID of the reservation to update", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "Reservation request", required=true, schema=@Schema()) @Valid @RequestBody ReservationRequest body);


    @Operation(summary = "Update User", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request data") })
    @RequestMapping(value = "/api/users/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "ID of the user to update", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "User request", required=true, schema=@Schema()) @Valid @RequestBody UserRequest body);

}

